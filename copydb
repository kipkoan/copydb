#!/bin/bash

E_OPTERROR=1

COMMAND=`basename $0`

usage()
{
cat << EOF
usage: $COMMAND [OPTION]... SOURCE_DATABASE [DESTINATION_DATABASE]

DESCRIPTION:
   Backup of MySQL database from SOURCE_DATABASE and optionally copy to DESTINATION_DATABASE

OPTIONS:
   -h                show this Help message
   -c <COMMENT>      Comment to add to filename (default: <none>)
   -u <USERNAME>     database Username (default: root)
   -p <PASSWORD>     database Password (default: <prompt>)
EOF
}

while getopts ":hc:u:p:" opt; do
  case $opt in
    h)
      usage
      exit
      ;;
    c)
      comment=$OPTARG
      ;;
    u)
      username=$OPTARG
      ;;
    p)
      password=$OPTARG
      ;;
    \?)
      echo "$COMMAND: Invalid option: -$OPTARG"
      usage
      exit $E_OPTERROR
      ;;
    :)
      echo "$COMMAND: Option -$OPTARG requires an argument."
      usage
      exit $E_OPTERROR
      ;;
  esac
done

# move operand pointer past any options
shift $(($OPTIND - 1))

# check for the right # of arguments
case $# in
  0)
    echo "$COMMAND: missing SOURCE_DATABASE operand"
    usage
    exit $E_OPTERROR
    ;;
  1)
    source_db=$1
    destination_db=
    ;;
  2)
    source_db=$1
    destination_db=$2
    ;;
  *)
    echo "$COMMAND: too many operands"
    usage
    exit $E_OPTERROR
    ;;
esac

if [[ $destination_db =~ '_prod' ]]; then
  echo -e "\n*******************************************************************************"
  echo -e "*                            !!!!!  WARNING !!!!!                             *"
  echo -e "*                                                                             *"
  echo -e "* This script will overwrite a PRODUCTION database ($destination_db)"
  echo -e "* with the contents of another database ($source_db)."
  echo -e "*                                                                             *"
  echo -e "* Are you sure you want to do this?  If so, confirm by entering \"CONFIRM\" in  *"
  echo -e "* all caps (without the quotes) at the prompt below.                          *"
  echo -e "*******************************************************************************"
  echo -e "\n"
  read -p "Are you sure? " confirm

  if [ $confirm != "CONFIRM" ]; then
    echo -e "## Exiting program without making any changes\n"
    exit
  fi
fi

# if comment is set & not empty, create the comment output
if [ -n "$comment" ]; then
  comment_out="\"$comment\"."
fi

# set DB username to "root" if not set with -u option
if [ -n "$username" ]; then
  db_username=$username
else
  db_username="root"
fi

# get & set DB password if not set with -p option
if [ -n "$password" ]; then
  db_password=$password
else
  read -s -p "DB Password: " db_password
  echo -e ""
fi

# if db_password is set & not empty, create the password output (use "-p")
# include space in front, so it will be separated from the username output
if [ -n "$db_password" ]; then
  db_password_out=" -p$db_password"
  db_password_out_hidden=" -p<password>"
else
  db_password_out=
  db_password_out_hidden=
fi

# get & set the date
date=$(date +%F.%T)

# set source & destination output filenames
source_db_output="output.source:$source_db.$comment_out$date.sql"
destination_db_output="output.destination:$destination_db.$comment_out$date.sql"

# create backup of source_database
echo -e "\n\n## Creating dump of source database: $source_db"
echo -e "> mysqldump -u $db_username$db_password_out_hidden $source_db > \"$source_db_output\""
mysqldump -u $db_username$db_password_out $source_db > "$source_db_output"

# if destination_database is set & not empty, back it up, wipe it out, then
# copy the # source_database to it
if [ -n "${destination_db-x}" ]; then
  echo -e "\n\n## Backing up destination database: $destination_db"
  echo -e "> mysqldump -u $db_username$db_password_out_hidden $destination_db > \"$destination_db_output\""
  mysqldump -u $db_username$db_password_out $destination_db > "$destination_db_output"

  echo -e "\n\n## Creating empty destination database: $destination_db"
  echo -e "> mysql -u $db_username$db_password_out_hidden -e \"DROP DATABASE IF EXISTS \\\`$destination_db\\\`; CREATE DATABASE \\\`$destination_db\\\` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\""
  mysql -u $db_username$db_password_out -e "DROP DATABASE IF EXISTS \`$destination_db\`; CREATE DATABASE \`$destination_db\` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;"

  echo -e "\n\n## Copying source database dump to destination database: $destination_db"
  echo -e "> mysql -u $db_username$db_password_out_hidden $destination_db < \"$source_db_output\""
  mysql -u $db_username$db_password_out $destination_db < "$source_db_output"
fi

# output line break for aesthatic purposes
echo -e "\n"
