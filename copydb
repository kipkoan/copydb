#!/bin/bash

E_OPTION_ERROR=1
E_INPUT_TYPE_ERROR=1
COMMAND=`basename $0`

# Set constants for formatting output
TXTNORMAL=$(tput sgr0)
TXTRED=$(tput setaf 1)


##############################################################################
main()
##############################################################################
{
  get_options "$@"

  # move operand pointer past any options & reset OPTIND
  shift $(($OPTIND - 1))
  OPTIND=1

  if [ -n "$source_file" ]; then   # SOURCE_FILE mode:
    get_operands_source_file "$@"
    set_common_variables

    if [ -n "$destination_db" ]; then   # copy source to destination
      prod_db_overwrite_test "a file ('$source_file')"
      backup_destination_db
      create_destination_db
      copy_source_to_destination_db "$source_file"
    fi

  else   # SOURCE_DATABASE mode:
    get_operands_source_database "$@"
    set_common_variables

    if [ -n "$destination_db" ]; then   # copy source to destination
      prod_db_overwrite_test "a database (\`$source_db\`)"
      backup_source_db   # sets $source_db_output
      backup_destination_db
      create_destination_db
      copy_source_to_destination_db "$source_db_output"
    else   # backup source database
      backup_source_db
    fi
  fi

  # output line break for aesthatic purposes
  echo -e "\n"
}


##############################################################################
help_prompt()
##############################################################################
{
echo "Try \`$COMMAND -h' for more information"
}


##############################################################################
usage()
##############################################################################
{
cat << EOF
usage: $COMMAND [OPTION]... SOURCE_DATABASE [DESTINATION_DATABASE]
       $COMMAND [OPTION]... -s SOURCE_FILE DESTINATION_DATABASE

DESCRIPTION:
   $COMMAND
      Backup of MySQL database from SOURCE_DATABASE and optionally copy to DESTINATION_DATABASE

   $COMMAND -s
      Copy SOURCE_FILE to DESTINATION_DATABASE

OPTIONS:
   -h                show this Help message
   -s <SOURCE_FILE>  copy from Source file to DESTINATION_DATABASE
   -c <COMMENT>      Comment to add to filename (default: <none>)
   -u <USERNAME>     database Username (default: root)
   -p <PASSWORD>     database Password (default: <prompt>)
   -p ''             database Password is not set (or null)
   -b                use Bzip2 to compress output
   -g                use Gzip to compress output
   -n                dry run - do Not actually do anything, just show what would be done
EOF
}


##############################################################################
get_options()
##############################################################################
{
  while getopts ":hs:c:u:p:bgn" opt; do
    case $opt in
      h)
        usage
        exit
        ;;
      s)
        source_file=$OPTARG
        ;;
      c)
        comment=$OPTARG
        ;;
      u)
        username=$OPTARG
        ;;
      p)
        password=$OPTARG
        ;;
      b)
        bzip2=TRUE
        ;;
      g)
        gzip=TRUE
        ;;
      n)
        dry_run=TRUE
        ;;
      \?)
        echo "$COMMAND: Invalid option: -$OPTARG"
        help_prompt
        exit $E_OPTION_ERROR
        ;;
      :)
        echo "$COMMAND: Option -$OPTARG requires an argument."
        help_prompt
        exit $E_OPTION_ERROR
        ;;
    esac
  done
}


##############################################################################
get_operands_source_file()
##############################################################################
{
  # check for the right # of arguments
  case $# in
    0)
      echo "$COMMAND: missing DESTINATION_DATABASE operand"
      help_prompt
      exit $E_OPTION_ERROR
      ;;
    1)
      destination_db=$1
      ;;
    *)
      echo "$COMMAND: too many operands"
      help_prompt
      exit $E_OPTION_ERROR
      ;;
  esac
}


##############################################################################
get_operands_source_database()
##############################################################################
{
  # check for the right # of arguments
  case $# in
    0)
      echo "$COMMAND: missing SOURCE_DATABASE operand"
      help_prompt
      exit $E_OPTION_ERROR
      ;;
    1)
      source_db=$1
      destination_db=
      ;;
    2)
      source_db=$1
      destination_db=$2
      ;;
    *)
      echo "$COMMAND: too many operands"
      help_prompt
      exit $E_OPTION_ERROR
      ;;
  esac
}


##############################################################################
prod_db_overwrite_test()
##############################################################################
{
  source_comment=$1

  if [[ $destination_db =~ '_prod' ]]; then
    echo -e "\n*******************************************************************************"
    echo -e "*                            !!!!!  WARNING !!!!!                             *"
    echo -e "*                                                                             *"
    echo -e "* This script will overwrite a PRODUCTION database ($destination_db)"
    echo -e "* with the contents of $source_comment."
    echo -e "*                                                                             *"
    echo -e "* Are you sure you want to do this?  If so, confirm by entering \"CONFIRM\" in  *"
    echo -e "* all caps (without the quotes) at the prompt below.                          *"
    echo -e "*******************************************************************************"
    echo -e "\n"
    read -p "Are you sure? " confirm

    if [ $confirm != "CONFIRM" ]; then
      echo -e "## Exiting program without making any changes\n"
      exit
    fi
  fi
}


##############################################################################
set_common_variables()
##############################################################################
{
  set_comment_out
  set_db_username
  set_db_password
  set_db_password_out
  set_date
}


##############################################################################
set_comment_out()
##############################################################################
{
  # if comment is set & not empty, create the comment output
  if [ -n "$comment" ]; then
    comment_out=".\"$comment\""
  fi
}


##############################################################################
set_db_username()
##############################################################################
{
  # set DB username to "root" if not set with -u option
  if [ -n "$username" ]; then
    db_username=$username
  else
    db_username="root"
  fi
}


##############################################################################
set_db_password()
##############################################################################
{
  # get & set DB password if not set with -p option
  if [ -n "$password" ]; then
    db_password=$password
  elif [ -n "${password+isSet}" ]; then
    db_password=
  else
    read -s -p "DB Password for user '$db_username': " db_password
    echo -e ""
  fi
}


##############################################################################
set_db_password_out()
##############################################################################
{
  # if db_password is set & not empty, create the password output (use "-p")
  # include space in front, so it will be separated from the username output
  if [ -n "$db_password" ]; then
    db_password_out=" -p'$db_password'"
    db_password_out_hidden=" -p'<password>'"
  else
    db_password_out=
    db_password_out_hidden=
  fi
}


##############################################################################
set_date()
##############################################################################
{
  # get & set the date
  date=$(date +%F.%T)
}


##############################################################################
output_command()
##############################################################################
{
  command=$1

  command_out=${command//'<password>'/$db_password_out_hidden}

  echo "> $command_out"
}


##############################################################################
run_command()
##############################################################################
{
  command=$1

  command_run=${command/'<password>'/$db_password_out}

  if [ -n "$dry_run" ]; then
    printf "  -- DRY RUN -- No Command Run\n"
  else
    eval "$command_run" &
    pid=$!

    printf " "
    rotate='|/-\'

    while kill -n 0 $pid 2>/dev/null; do
      rotate="${rotate#?}${rotate%???}"
      printf '%.1s\b' "$rotate"
      sleep 0.125
    done

    printf " \n"
    wait $pid
  fi
}


##############################################################################
output_fail_and_exit()
##############################################################################
{
  printf "${TXTRED}***** COMMAND FAILED *****${TXTNORMAL}\n\n"
  exit
}


##############################################################################
run_command_or_fail()
##############################################################################
{
  command=$1

  trap 'output_fail_and_exit' ERR
  set -o pipefail

  run_command "$1"
}


##############################################################################
output_and_run_command()
##############################################################################
{
  command=$1

  output_command "$1"

  run_command "$1"
}


##############################################################################
output_and_run_command_or_fail()
##############################################################################
{
  command=$1

  output_command "$1"

  run_command_or_fail "$1"
}


##############################################################################
output_filename()
##############################################################################
{
  backup_type=$1
  database=$2

  output_filename="output.$backup_type:\"$database\".$date$comment_out.sql"

  echo $output_filename
}


##############################################################################
optionally_compress_file()
##############################################################################
{
  filename=$1

  if [ -n "$bzip2" ]; then
    command="bzip2 $original_file"

    echo -e "\n## Compressing file with bzip2: \"$filename\""
    output_and_run_command_or_fail "$command"

  elif [ -n "$gzip" ]; then
    command="gzip $original_file"

    echo -e "\n## Compressing file with gzip: \"$filename\""
    output_and_run_command_or_fail "$command"
  fi
}



##############################################################################
redirect_to_output()
##############################################################################
{
  output_file=$1
  redirection=""

  if [ -n "$bzip2" ]; then
    redirection="| bzip2 -c "
  elif [ -n "$gzip" ]; then
    redirection="| gzip -c "
  fi

  redirection_output="$redirection> '$output_file'"

  echo $redirection_output
}


##############################################################################
redirect_from_input()
##############################################################################
{
  input_file=$1
  mime_type=$(file -ib "$1")

  case $mime_type in
    *text/plain*)
      input_process="cat"
      ;;
    *bzip*)
      input_process="bzip2 -dc"
      ;;
    *gzip*)
      input_process="gzip -dc"
      ;;
    *)
      echo -e "\n$COMMAND: input format not supported"
      help_prompt
      exit $E_INPUT_TYPE_ERROR
      ;;
  esac

  redirection_input="${input_process} '$input_file'"

  echo $redirection_input
}


##############################################################################
backup_source_db()
##############################################################################
{
  # set source output filename
  source_db_output=$(output_filename 'source' "$source_db")

  command="mysqldump -u '$db_username'<password> '$source_db' > $source_db_output"

  echo -e "\n\n## Creating dump of source database: \"$source_db\""
  output_and_run_command_or_fail "$command"

  optionally_compress_file "$source_db_output"
}


##############################################################################
check_for_destination_db()
##############################################################################
{
  # check if destination database exists
  command="mysql --batch --skip-column-names -u '$db_username'$db_password_out -e 'SHOW DATABASES LIKE \"$destination_db\"' | grep -q '$destination_db'"

  echo -e "\n\n## Check if destination database exists: \"$destination_db\""

  run_command_or_fail "$command"

  if [ "$?" -eq "0" ]; then
    printf "## Destination database exists"
    return 0
  else
    printf "## Destination database does not exist"
    return 1
  fi
}


##############################################################################
backup_destination_db()
##############################################################################
{
  check_for_destination_db

  if [ "$?" -eq "0" ]; then
    # set destination output filename
    destination_db_output=$(output_filename 'destination' "$destination_db")

    command="mysqldump -u '$db_username'<password> '$destination_db' > $destination_db_output"

    printf "... Backing up: \"$destination_db\"\n"
    output_and_run_command_or_fail "$command"

    optionally_compress_file "$destination_db_output"

  else
    printf "... Skipping backup\n"
  fi
}


##############################################################################
create_destination_db()
##############################################################################
{
  command="mysql -u '$db_username'<password> -e 'DROP DATABASE IF EXISTS \`$destination_db\`; CREATE DATABASE \`$destination_db\` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;'"

  echo -e "\n\n## Creating empty destination database: \"$destination_db\""
  output_and_run_command_or_fail "$command"
}


##############################################################################
copy_source_to_destination_db()
##############################################################################
{
  source_db_file=$1

  trap 'output_fail_and_exit' ERR
  set -o pipefail

  command="$(redirect_from_input "$source_db_file") | mysql -u '$db_username'<password> '$destination_db'"

  echo -e "\n\n## Copying source database dump to destination database: \"$destination_db\""
  output_and_run_command_or_fail "$command"
}


##############################################################################
# call main function
##############################################################################
main "$@"
